## register-ami
#
# Register the new AMI

declare kernel=""

if [ "${volume_type}" = 'instance' ]
then
    # The current list of AKIs can be discovered here:
    # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html

    case ${region} in
        # ap-northeast-1, Asia Pacific (Tokyo) region
        ap-northeast-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-176bf516"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-136bf512"
            ;;

        # ap-southeast-1, Asia Pacific (Singapore) region
        ap-southeast-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-503e7402"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-ae3973fc"
            ;;

        # ap-southeast-2, Asia Pacific (Sydney) region
        ap-southeast-2)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-c362fff9"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-cd62fff7"
            ;;

        # eu-central-1, EU (Frankfurt) region
        eu-central-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-184c7a05"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-3e4c7a23"
            ;;

        # eu-west-1, EU (Ireland) region
        eu-west-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-52a34525"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-68a3451f"
            ;;

        # sa-east-1, South America (Sao Paulo) region
        sa-east-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-5553f448"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-5b53f446"
            ;;

        # us-east-1, US East (N. Virginia) region
        us-east-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-919dcaf8"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-8f9dcae6"
            ;;

        # us-gov-west-1, AWS GovCloud (US)
        us-gov-west-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-1de98d3e"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-1fe98d3c"
            ;;

        # us-west-1, US West (N. California) region
        us-west-1)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-880531cd"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-8e0531cb"
            ;;

        # us-west-2, US West (Oregon) region
        us-west-2)
            # pv-grub-hd0_1.04-x86_64.gz
            [ ${arch} = 'amd64' ] && aki="aki-fc8f11cc"

            # pv-grub-hd0_1.04-i386.gz
            [ ${arch} = 'i386' ] && aki="aki-f08f11c0"
            ;;

        *) die "Unrecognized region:" "${region}"
    esac
fi

if [ ${arch} = 'amd64' ]
then
    ami_arch='x86_64'
elif [ ${arch} = 'i386' ]
then
    ami_arch='i386'
fi

# HVM instances don't use AKIs, but our paravirtual instances require the
# PvGRUB AKI. Note that the virt type is completely independent of the volume
# type. Ignore the PvGRUB AKI "rootDeviceType" debug description (which is
# always set to "instance-store").
if [ "${virt}" = 'paravirtual' ]
then
    kernel="--kernel ${aki}"
fi

if [ "${volume_type}" = 'instance' ]
then
    log "Registering an AMI"

    ami_id=$(euca-register \
        --name "${ami_name}" --description "${description}" \
        --architecture "${ami_arch}" ${kernel} \
        --virtualization-type "${virt}" \
        "${S3_BUCKET}/${ami_name}.manifest.xml" \
        | awk '{print $2}')

    # In case of registraion failure, give the AMI registration command to the
    # user.
    if [[ ! "${ami_id}" =~ ^ami-[0-9a-z]{8}$ ]]
    then
        die \
            "Unable to register an AMI." \
            "You can do it manually with:" \
            "$(which euca-register) \\\\" \
            "--name '${ami_name}' --description '${description}' \\\\" \
            "--architecture '${ami_arch}' ${kernel} \\\\" \
            "--virtualization-type '${virt}' \\\\" \
            "'${S3_BUCKET}/${ami_name}.manifest.xml'"
    fi
else
    log "Registering an AMI with the snapshot '${snapshot_id}'"

    ami_id=$(euca-register \
        --name "${ami_name}" --description "${description}" \
        --architecture "${ami_arch}" ${kernel} \
        --virtualization-type "${virt}" \
        --snapshot "${snapshot_id}" \
        --root-device-name /dev/xvda \
        | awk '{print $2}')

    # In case of registraion failure, give the AMI registration command to the
    # user.
    if [[ ! "$ami_id" =~ ^ami-[0-9a-z]{8}$ ]]
    then
        die \
            "Unable to register an AMI." \
            "You can do it manually with:" \
            "$(which euca-register) \\\\" \
            "--name '${ami_name}' --description '${description}' \\\\" \
            "--architecture '${ami_arch}' ${kernel} \\\\" \
            "--virtualization-type '${virt}' \\\\" \
            "--snapshot '${snapshot_id}' \\\\" \
            "--root-device-name /dev/xvda"
    fi
fi

log "Your AMI has been created with the ID '${ami_id}'"
