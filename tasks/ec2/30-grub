## grub
#
# Configure GRUB as appropriate.

declare grub_device


## Configure ${imagedir}/etc/default/grub

# Disable the count-down.
sed -i "s/^\(GRUB_TIMEOUT\)=.*$/\1=0/" "${imagedir}/etc/default/grub"

# Disable recovery options - we won't be able to select them anyway.
sed -i "s/^#\(GRUB_DISABLE_RECOVERY\)=.*$/\1=\"true\"/" \
    "${imagedir}/etc/default/grub"

if [ "${partitioning}" = "none" ]
then
    # Disable UUID lookup - use device name instead since there is no
    # chance of it changing.
    sed -i "s/^#\(GRUB_DISABLE_LINUX_UUID=true\)/\1/" \
        "${imagedir}/etc/default/grub"
fi

# Simplify grub.cfg to improve compatibility.
echo -e 'GRUB_DISABLE_OS_PROBER=true\nGRUB_DISABLE_SUBMENU=y' \
    >> "${imagedir}/etc/default/grub"

# Set output console.
sed -i "s/^\(GRUB_CMDLINE_LINUX_DEFAULT\)=.*$/\1=\"quiet console=ttyS0\"/" \
    "${imagedir}/etc/default/grub"

# Paravirtual instances using instance-storage need the root block
# device to appear as a partition, to be compatible with the official
# AWS PV-GRUB AKI images.
if [ "${virt}" = 'paravirtual' -a "${volume_type}" = 'instance' ]
then
    root_device='/dev/xvda1'
elif [ "${partitioning}" = "none" ]
then
    root_device='/dev/xvda'
else
    root_device='/dev/xvda1'
fi
echo "GRUB_DEVICE=${root_device}" >> "${imagedir}/etc/default/grub"

if [ "${virt}" = 'paravirtual' ]
then
    ## Configure for PyGRUB support.

    # Disable normal Grub 2 configuration files.
    chmod -x "${imagedir}"/etc/grub.d/*

    # Install the 40_custom file, which generates a nice menu.lst
    script='40_custom'
    cp -f "${scriptdir}/grub.d/${script}" "${imagedir}/etc/grub.d/${script}"

    chmod 755 "${imagedir}/etc/grub.d/${script}"

    # Regenerate grub.cfg.
    chroot "${imagedir}" update-grub

    # pv-grub-hd0_1.04-*.gz is configred for the old
    # (hd0)/boot/grub/menu.lst naming convention, but update-grub
    # names it /boot/grub/grub.cfg.
    chroot "${imagedir}" ln -s grub.cfg /boot/grub/menu.lst
else
    ## HVM (standard GRUB) support.

    # Update grub.cfg using the script. This will now work correctly.
    chroot "${imagedir}" update-grub

    # Install Grub to the start of the block device.
    chroot "${imagedir}" grub-install --no-floppy --force "${block_device_path}"
fi

# Sanity check values in grub.cfg
if [ "${block_device_path:0:7}" = "/dev/sd" ]
then
    sed -i "s#${block_device_path}#/dev/sda#g" \
        "${imagedir}/boot/grub/grub.cfg"
elif [ "${block_device_path:0:8}" = "/dev/xvd" ]
then
    sed -i "s#${block_device_path}#/dev/xvda#g" \
        "${imagedir}/boot/grub/grub.cfg"
fi
